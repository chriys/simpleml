from typing import Any, Optional

from numpydantic import NDArray, Shape
from pydantic import BaseModel

from core.simpleml import ModelAdapter
from core.enums import TargetType


class PredictResponse(BaseModel):
    """
    Raw response for predictions generated by custom models.

    Schema
    ------
    predictions: predictions returned by the model.
    columns: list of columns.
    """
    predictions: NDArray[Shape["*, 1"], int]
    columns: Optional[NDArray[Shape["1"], Any]] = None


class PythonPredictor:
    def __init__(self):
        self._model_adapter = None


    def configure(self, params):
        target_type = TargetType(params.get("target_type"))
        code_dir = params.get("code_dir")

        self._model_adapter = ModelAdapter(code_dir=code_dir, target_type=target_type)
        self._model_adapter.load_custom_hooks()

        self._model = self._model_adapter.load_model_from_artifact()


    def predict(self, **kwargs):
        preds = self._model_adapter.predict(self._model, **kwargs)
        return PredictResponse(predictions=preds.values, columns=preds.columns.values)
